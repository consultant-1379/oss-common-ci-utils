#!/usr/bin/env groovy

def ruleset = "scripts/vulnerability_analysis/vulnerability_analysis_ruleset.yaml"
def bob = "python3 bob/bob.py -r ${ruleset}"
@Library('oss-common-pipeline-lib@dVersion-2.0.0-hybrid') _

pipeline {
    agent {
        label env.NODE_LABEL
    }

    options {
        timestamps()
        timeout(time: 40, unit: 'MINUTES')
    }

    environment {
        CREDENTIALS_SELI_ARTIFACTORY = credentials('SELI_ARTIFACTORY')
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    // Bob submodule
                    sh "git submodule add ../../../adp-cicd/bob"
                    sh "${bob} --help"

                    // Read config files from microservice's repo
                    sh "git clone ${GERRIT_MIRROR}/${env.GERRIT_REPO}"
                    sh "mkdir .bob"
                    sh "mkdir config"
                    sh "echo ${env.DOCKER_IMAGE_VERSION} >> .bob/var.version"
                    REPO_NAME = "${env.GERRIT_REPO}".split("/")[2]
                    sh "cp ${WORKSPACE}/${REPO_NAME}/common-properties.yaml ${WORKSPACE}/"
                    sh "cp ${WORKSPACE}/${REPO_NAME}/config/va-report.config ${WORKSPACE}/config"
                    sh "cp ${WORKSPACE}/scripts/vulnerability_analysis/xray_report.config ${WORKSPACE}/config"
                    sh "cp ${WORKSPACE}/scripts/vulnerability_analysis/va_html_config.yaml ${WORKSPACE}/config"
                    sh "rm -rf ${REPO_NAME}"
                    currentBuild.displayName = currentBuild.displayName + ' / ' + "${REPO_NAME} / ${env.DOCKER_IMAGE_VERSION}"
                }
            }
        }

        stage('Vulnerability Analysis') {
            steps {
                parallel(
                    "Trivy": {
                        script {
                            ci_pipeline_scripts.retryMechanism("${bob} trivy-inline-scan", 3)
                        }
                    },
                    "Xray": {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                ci_pipeline_scripts.retryMechanism("${bob} fetch-xray-report", 3)
                            }
                        }
                    },
                    "Anchore-Grype": {
                        script {
                            ci_pipeline_scripts.retryMechanism("${bob} anchore-grype-scan", 3)
                        }
                    }
                )
            }
            post {
                cleanup {
                    sh "${bob} delete-images-from-agent:cleanup-anchore-trivy-images"
                }
            }
        }

        stage('Vulnerability Report') {
            steps {
                script {
                    sh "${bob} generate-VA-report-V2:no-upload"
                    sh "${bob} generate-VA-report-V2:va-report-to-html"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'build/va-reports/Vulnerability_Report_2.0.md'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'build/html/html-va-report/Vulnerability_Report_2.0.html'
                }
            }
        }
    }
    post {
        success {
            commonPostSteps()
        }
    }
}

def commonPostSteps() {
    dir("${env.WORKSPACE}") {
        // Prepare zip file and upload to artifactory
        writeFile file: "jenkins_console_output.txt", text: currentBuild.rawBuild.logFile.text
        def readContent = readFile env.WORKSPACE + "/jenkins_console_output.txt"
        writeFile file: env.WORKSPACE + "/jenkins_console_output.txt", text: readContent + "\r\nFinished: ${currentBuild.currentResult}"
        sh 'sed -ri "s/\\x1b\\[8m.*?\\x1b\\[0m//g" jenkins_console_output.txt'
        def VERSION = readFile('.bob/var.version').trim()
        zip zipFile: "${VERSION}.zip", archive: true, glob: 'target/**,build/**,test-output/**,jenkins_console_output.txt', dir: "."
        sh "curl -u ${env.CREDENTIALS_SELI_ARTIFACTORY_USR}:${env.CREDENTIALS_SELI_ARTIFACTORY_PSW} -X PUT -T  ${VERSION}.zip  https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-ci-internal-build-artifacts-generic-local/${JOB_NAME}/${BUILD_NUMBER}/${VERSION}.zip"

        // Send email notification
        mail to: "${env.EMAIL}",
            from: 'jenkins-ossadmin-no-reply@ericsson.com',
            subject: "Vulnerability report for ${env.BUILD_DISPLAY_NAME}",
            body: " <br> Hello, <br> We wanted to inform you that the build artifacts for the Jenkins build <a href='${env.BUILD_URL}'>${env.BUILD_DISPLAY_NAME}</a> have been uploaded to https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-ci-internal-build-artifacts-generic-local/${env.JOB_NAME}/${env.BUILD_NUMBER}/${VERSION}.zip <br><br>" +
            "Please note that artifacts that are older than 10 days will be deleted automatically from the artifactory. If you require access to the artifacts that are older than 10 days, please download them now.<br><br>" +
            "<b>Note: </b>To access the Vulnerability report, please download and extract the zip file. You can find the reports inside the build/ folder.<br><br>" +
            "Best Regards,<br>" +
            "The Hummingbirds<br>",
            mimeType: 'text/html'
    }
}