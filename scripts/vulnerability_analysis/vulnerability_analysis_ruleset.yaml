#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "vulnerability analysis ruleset"

docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:latest
  - grype-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:latest
  - trivy-inline-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:latest

import:
  common: ../../common-properties.yaml

properties:
  - image-to-scan: armdocker.rnd.ericsson.se/proj-eric-oss-ci-internal/${common.docker-image-name}:${var.version}

env:
  - PWD
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS

var:
  - version

rules:
  # xray
  fetch-xray-report:
    - task: fetch-xray-report
      docker-image: adp-release-auto
      cmd: bash -c 'fetch-xray
        --config ${env.PWD}/config/xray_report.config
        --debug
        --user ${env.SELI_ARTIFACTORY_REPO_USER}
        --apikey ${env.SELI_ARTIFACTORY_REPO_PASS}
        --output ${env.PWD}/build/va-reports/xray-reports/xray_report.json
        --set artifactory-subpath=proj-eric-oss
        --set image=${common.docker-image-name}
        --set version=${var.version}
        --raw-output ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json'

  # anchore
  anchore-grype-scan:
    - task: fetch-image
      cmd: "docker pull ${image-to-scan}"
    - task: anchore-grype-scan
      docker-image: grype-scan
      docker-in-docker: socket
      cmd: grype_scan
        --image ${image-to-scan}
        --report-dir build/va-reports/anchore-reports

  # trivy
  trivy-inline-scan:
    - task: fetch-image
      cmd:
        - "docker pull ${image-to-scan}"
        - mkdir -p build/va-reports/trivy-reports
    - task: trivy-inline-scan-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${image-to-scan} 2>&1 | tee build/va-reports/trivy-reports/trivy.console.summary.txt
    - task: trivy-inline-scan-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/trivy.report.json --offline-scan --timeout 30m ${image-to-scan}

  # vulnerability analysis report
  generate-VA-report-V2:
    - task: no-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env VHUB_API_TOKEN
      cmd: bash -c 'va-report
        --set version=${var.version}
        --config ${env.PWD}/config/va-report.config
        --output ${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md
        --md
        --debug
        --anchore-reports ${env.PWD}/build/va-reports/anchore-reports
        --trivy-reports ${env.PWD}/build/va-reports/trivy-reports
        --xray-report ${env.PWD}/build/va-reports/xray-reports/xray_report.json
        --raw-xray-report ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json'; exit 0;
    - task: va-report-to-html
      docker-image: adp-release-auto
      cmd:
        bash -c 'if [ -f "${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md" ];
        then
        doc-handler generate
        --config config/va_html_config.yaml
        --output build/html
        --format html;
        else
        echo "The Vulnerability_Report_2.0.md file does not exist in the workspace to generate the HTML report.";
        fi'

  # image cleanup
  delete-images-from-agent:
    - task: cleanup-anchore-trivy-images
      cmd:
        - docker image remove -f armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:latest $(docker images -f "dangling=true" -q) || true
        - docker image remove -f armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:latest $(docker images -f "dangling=true" -q) || true
        - docker image remove -f ${image-to-scan} $(docker images -f "dangling=true" -q) || true
