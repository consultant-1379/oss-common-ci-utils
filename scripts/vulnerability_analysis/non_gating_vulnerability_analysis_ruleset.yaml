#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "vulnerability analysis ruleset"

docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:latest
  - grype-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:latest
  - trivy-inline-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan:latest
  - va-scan-kubesec: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:latest
  - va-scan-kubeaudit: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:latest
  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:latest

import:
  common: ../../common-properties.yaml

properties:
  - image-to-scan: armdocker.rnd.ericsson.se/proj-eric-oss-ci-internal/${common.docker-image-name}:${var.version}

env:
  - PWD
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - HADOLINT_ENABLED
  - KUBESEC_ENABLED
  - KUBEAUDIT_ENABLED
  - ANCHORE_ENABLED
  - TRIVY_ENABLED
  - XRAY_ENABLED

var:
  - version
  - resultcode_hadolint_check
  - va-report-args

rules:
  # xray
  fetch-xray-report:
    - task: fetch-xray-report
      docker-image: adp-release-auto
      cmd: bash -c 'fetch-xray
        --config ${env.PWD}/config/xray_report.config
        --debug
        --user ${env.SELI_ARTIFACTORY_REPO_USER}
        --apikey ${env.SELI_ARTIFACTORY_REPO_PASS}
        --output ${env.PWD}/build/va-reports/xray-reports/xray_report.json
        --set artifactory-subpath=proj-eric-oss
        --set image=${common.docker-image-name}
        --set version=${var.version}
        --raw-output ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json'

  # anchore
  anchore-grype-scan:
    - task: fetch-image
      cmd: "docker pull ${image-to-scan}"
    - task: anchore-grype-scan
      docker-image: grype-scan
      docker-in-docker: socket
      cmd: grype_scan
        --image ${image-to-scan}
        --report-dir build/va-reports/anchore-reports

  # trivy
  trivy-inline-scan:
    - task: fetch-image
      cmd:
        - "docker pull ${image-to-scan}"
        - mkdir -p build/va-reports/trivy-reports
    - task: trivy-inline-scan-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${image-to-scan} 2>&1 | tee build/va-reports/trivy-reports/trivy.console.summary.txt
    - task: trivy-inline-scan-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/trivy.report.json --offline-scan --timeout 30m ${image-to-scan}

  # hadolint
  hadolint-scan:
    - task: hadolint-scan-test
      docker-image: hadolint-scan
      docker-flags:
        - "--workdir /app/"
        - "-v ${env.PWD}/config/hadolint_config.yaml:/config/hadolint_config.yaml"
        - "-v ${env.PWD}/Dockerfile:/Dockerfile"
        - "-v ${env.PWD}/build/va-reports/hadolint-scan:/tmp/reports/"
      cmd: "-p ${common.helm-chart-name} -f /Dockerfile -c /config/hadolint_config.yaml; echo $? > .bob/var.resultcode_hadolint_check"

  evaluate-design-rule-check-resultcodes:
    - task: hadolint-result-check
      cmd: sh -c '
         if [ ${var.resultcode_hadolint_check} -ne 0 ]; then
            echo "Failure in hadolint checker";
            exit ${var.resultcode_hadolint_check};
         fi ;'

  # kubeaudit
  kube-audit:
    - task: helm-template
      docker-image: adp-release-auto
      cmd: "helm template charts/${common.helm-chart-name} --output-dir=.bob/helm_src --dependency-update"
    - task: kube-audit-test
      docker-image: va-scan-kubeaudit
      docker-flags:
        - "--workdir /opt/va-scan-kubeaudit/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubeaudit/conf"
        - "-v ${env.PWD}/build/va-reports/kube-audit-report/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_src:/tmp/src"
      cmd: " "

  # kubesec
  kubesec-scan:
    - task: helm-template
      docker-image: va-scan-kubesec
      cmd: "helm template charts/${common.helm-chart-name} --output-dir=.bob/helm_kubesec --dependency-update"
    - task: remove-files-not-for-scanning
      cmd:
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/tests
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/hpa.yaml
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/rolebinding.yaml
    - task: kubesec-scan-test
      docker-image: va-scan-kubesec
      docker-flags:
        - "--workdir /opt/va-scan-kubesec/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubesec/conf"
        - "-v ${env.PWD}/build/va-reports/kubesec-reports/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_kubesec/:/tmp/src"
      cmd: " "

  # Prepare arguments for VA report generation
  set-va-report-args:
    - task: hadolint-scan
      cmd: if [ "${env.HADOLINT_ENABLED}" = "true"  ]; then
        echo "--hadolint-reports ${env.PWD}/build/va-reports/hadolint-scan" >> .bob/va-report-args.txt;
        fi
    - task: kubesec-scan
      cmd: if [ "${env.KUBESEC_ENABLED}" = "true"  ]; then
        echo "--kubesec-reports ${env.PWD}/build/va-reports/kubesec-reports" >> .bob/va-report-args.txt;
        fi
    - task: kubeaudit-scan
      cmd: if [ "${env.KUBEAUDIT_ENABLED}" = "true"  ]; then
        echo "--kubeaudit-reports ${env.PWD}/build/va-reports/kube-audit-report/${common.helm-chart-name}/templates/deployment" >> .bob/va-report-args.txt;
        fi
    - task: anchore-grype-scan
      cmd: if [ "${env.ANCHORE_ENABLED}" = "true"  ]; then
        echo "--anchore-reports ${env.PWD}/build/va-reports/anchore-reports" >> .bob/va-report-args.txt;
        fi
    - task: trivy-inline-scan
      cmd: if [ "${env.TRIVY_ENABLED}" = "true"  ]; then
        echo "--trivy-reports ${env.PWD}/build/va-reports/trivy-reports" >> .bob/va-report-args.txt;
        fi
    - task: fetch-xray-report
      cmd: if [ "${env.XRAY_ENABLED}" = "true"  ]; then
        echo "--xray-report ${env.PWD}/build/va-reports/xray-reports/xray_report.json" >> .bob/va-report-args.txt;
        echo "--raw-xray-report ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json" >> .bob/va-report-args.txt;
        fi
    - task: set-va-report-args
      cmd:
        - cat ${env.PWD}/.bob/va-report-args.txt | xargs >> .bob/var.va-report-args
        - rm -rf .bob/va-report-args.txt

  # vulnerability analysis report
  generate-VA-report-V2:
    - rule: set-va-report-args
    - task: no-upload
      docker-image: adp-release-auto
      cmd: bash -c 'va-report
           --set version=${var.version}
           --config ${env.PWD}/config/va-report.config
           --output ${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md
           --md
           --debug
           ${var.va-report-args}'; exit 0;
    - task: va-report-to-html
      docker-image: adp-release-auto
      cmd:
        bash -c 'if [ -f "${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md" ];
        then
        doc-handler generate
        --config config/va_html_config.yaml
        --output build/html
        --format html;
        else
        echo "The Vulnerability_Report_2.0.md file does not exist in the workspace to generate the HTML report.";
        fi'